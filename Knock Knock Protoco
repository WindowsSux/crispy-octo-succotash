Knock Knock Protocol

-------------------------------------------------------------------------------------------------------------------------

Server always out there listening ...
Waiting for a client to initiate communication ...

C:	100	Client initiates communication with Server (Could be accompanied by a "Hello." ... not necessary)

S:	200	Server acknowledges client contact, always asks "Hello, would you like to hear a knock knock joke? (Y/N)"

C:	110	Client declines with "N" (break connection)
		// room at this point for any case of "n" or "no" (n/N/no/NO/nO/No) to produce a 110
		// anything besides some case form of "n" or "no" or "y" or "yes" should reprompt client until an acceptable response entered

OR

C:	111	Client accepts with "Y"
		// room at this point for any case of "Y" or "YES" (y/Y/yes/YES/Yes/etc..) to produce a 111
		// anything besides some case form of "n" or "no" or "y" or "YES" should reprompt client until an accepable response entered
OR

C:	999	Perhaps give client 3 chances to respond to 200 with an acceptable "Y" or "N" or "Yes" or "No"
		// otherwise break connection with 999

S:	210	Server responds to client's accept with lead in to joke "Knock, knock."

C:	120	Client responds with: "Who's there?"
		// room at this point for accepting varying forms of response, such as...
			// (Who's there / Whos there? / Whos there / Whose there? / Whose there / etc...)
		// anything besides some acceptable form of "Who's there?" should reprompt client until acceptable reply

OR

C:	999	Perhaps give client 3 chances to respond to 120 with an acceptable form of "Who's there?"
		// otherwise break connection with 999

S:	220	Server replies: "King Tut"
		// could also have a library of multiple jokes here (221,222,223,224 etc..)
		// where one is selected at random, or one is served and a counter ticks to next for next time
		// though not necessary unless want to get fancy (PLUS, WHAT COULD BEAT KING TUTKEY FRIED CHICKEN?)

C:	130	Client responds with: "King Tut who?"
		// as with other client responses, allow for acceptable variant forms of "King Tut who?"

OR

C:	999	Perhaps give client 3 chances to respond to 130 with and acceptable form of "King Tut who?"
		// otherwise break connection with 999

S:	230	Server replies: "KINGTUTKEY FRIED CHICKEN!"
		// Could at this point ask "Would you like to hear another?" if want to get that detailed
		// Then would cycle back to waiting on a 110 or a 111 and tell a new joke from joke library
		// This is not necessary... would get simple one-joke server up and running first
		// So start by having 230 reply with the answer above... and also:
	
		Still as part of 230, server says: "Good bye." and breaks connection.

---------------------------------------------------------------------------------------------------------------------------------

This is a simple starting point that can be used as a road map to get the protocol up and running.
There is plenty of room for additional features, but getting this one-joke server functioning would be sufficient for the assignment I think.
At least as a starting point, to layer on once this is functional.
Server should always respond immediately once it receives a code from the client...
Could layer on a timeout (888) from the server if the client does not respond with X minutes of any server prompts.
		
